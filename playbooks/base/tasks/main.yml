---

#
# Homebrew.
#

#
# TODO: 
# - sdkman installation
# 

# Do a brew update.
- homebrew:
    update_homebrew: 'yes'

- name: 'install asdf'
  homebrew: 
    name: 'asdf' 
    state: 'latest'

- name: 'install fzf'
  homebrew:
    name: 'fzf' 
    state: 'latest'
#
# Even with 'asdf' there are some similiar tools I want to install:
#
#     then just tell jenv about it.
#   - pyenv/rbenv: To get python-build and ruby-build installed, which gives me
#     much more flexibiltiy when it comes to installing them, and then just let
#     asdf manage the different versions.
# 

- name: 'install pyenv'
  homebrew: 
    name: 'pyenv' 
    state: 'latest'

- name: 'install rbenv'
  homebrew: 
    name: 'rbenv' 
    state: 'latest'

- name: 'install ripgrep'
  homebrew: 
    name: 'ripgrep' 
    state: 'latest'

- name: 'install the_silver_searcher'
  homebrew: 
    name: 'the_silver_searcher' 
    state: 'latest'

- name: 'install starship'
  homebrew: 
    name: 'starship' 
    state: 'latest'

- name: 'install vim'
  homebrew: 
    name: 'vim' 
    state: 'latest'

- name: 'install wget'
  homebrew: 
    name: 'wget' 
    state: 'latest'

#
# Shells
#

- name: 'install bash'
  homebrew:
    name: 'bash' 
    state: 'latest'

- name: 'install zsh'
  homebrew:
    name: 'zsh' 
    state: 'latest'

- name: 'install zinit'
  git: 	
    repo: 'https://github.com/zdharma/zinit.git' 
    dest: '~/.zinit/bin'

#
# The "environment:" stuff here kind of a hack. Seems ansible passes the
# existing environment when sudoing. For me, that includes asdf, which is
# managing my python env. This creates all kinds of grief when sudo'ed.  I
# could munge my path to remove the asdf stuff, but it seems all we need in 
# the path is '/usr/bin'.
#

- name: 'add homebrew bash to /etc/shells'
  lineinfile: 
    path: '/etc/shells' 
    line: '/usr/local/bin/bash' 
    state: 'present'
  become: 'yes'
  environment:
    PATH: '/usr/bin'

- name: 'add homebrew zsh to /etc/shells'
  lineinfile: 
    path: '/etc/shells' 
    line: '/usr/local/bin/zsh' 
    state: 'present'
  become: 'yes'
  environment:
    PATH: '/usr/bin'

- name: Set default shell
  user: 
    name: '{{ ansible_user_id }}' 
    shell: '/usr/local/bin/zsh'
  become: 'yes'
  environment:
    PATH: '/usr/bin'

#
# Homebrew casks.
#

#
# I've tried to set this up to handle upgrades but that seems to be fraught
# with peril (the issues are too many to enumerate). So I've pretty much just
# set this up to ensure the apps are installed, but that's it. This means that
# I can upgrade apps via their automatic upgrade feature or just via brew
# directly.
#
# In addition, we use 'accept_external_apps' which means that the task should
# basically no-op regardless of how the app got installed (i.e. whether our
# task did it or not). That seems to be buggy though and doesn't always work.
# The workaround for an app in that case is to uninstall it and then either
# install it via brew or this playbook, afterwhich, it's all good.
#

- name: 'install plain-clip'
  homebrew_cask: 
    name: 'plain-clip'
    state: 'present'
    accept_external_apps: 'yes'

- name: 'install controlplane'
  homebrew_cask: 
    name: 'controlplane' 
    state: 'present'
    accept_external_apps: 'yes'

- name: 'install google-chrome'
  homebrew_cask: 
    name: 'google-chrome' 
    state: 'latest'
    install_options: 'force'
    accept_external_apps: 'yes'

- name: 'install iterm2'
  homebrew_cask: 
    name: 'iterm2' 
    state: 'latest'
    install_options: 'force'
    accept_external_apps: 'yes'

- name: 'install macvim'
  homebrew_cask: 
    name: 'macvim' 
    state: 'latest'
    install_options: 'force'
    accept_external_apps: 'yes'

- name: 'install spotify'
  homebrew_cask: 
    name: 'spotify' 
    state: 'latest'
    install_options: 'force'
    accept_external_apps: 'yes'

- name: 'install vagrant'
  homebrew_cask: 
    name: 'vagrant' 
    state: 'latest'
    install_options: 'force'
    accept_external_apps: 'yes'

- name: 'install virtualbox'
  homebrew_cask: 
    name: 'virtualbox' 
    state: 'latest'
    install_options: 'force'
    accept_external_apps: 'yes'

- name: 'install vivaldi'
  homebrew_cask: 
    name: 'vivaldi' 
    state: 'latest'
    install_options: 'force'
    accept_external_apps: 'yes'

#
# Non-brew installs.
#

- name: 'install powerline-go'
  get_url: 
    url: 'https://github.com/justjanne/powerline-go/releases/download/v1.11.0/powerline-go-darwin-amd64'
    dest: '/usr/local/bin/powerline-go'
    mode: '0755'

#
# My dotfiles.
#

- name: '.bashrc symlink'
  file: 
    src: '{{ playbook_dir }}/../dotfiles/.bashrc'
    dest: '~/.bashrc'
    state: 'link'

- name: '.profile symlink'
  file: 
    src: '{{ playbook_dir }}/../dotfiles/.profile'
    dest: '~/.profile'
    state: 'link'

- name: '.zshenv symlink'
  file: 
    src: '{{ playbook_dir }}/../dotfiles/.zshenv'
    dest: '~/.zshenv'
    state: 'link'

- name: '.zprofile symlink'
  file: 
    src: '{{ playbook_dir }}/../dotfiles/.zprofile'
    dest: '~/.zprofile'
    state: 'link'

- name: '.zshrc symlink'
  file: 
    src: '{{ playbook_dir }}/../dotfiles/.zshrc'
    dest: '~/.zshrc'
    state: 'link'

#
# Starship prompt config.
#

- name: 'create ~/.config'
  file:
    path: '~/.config'
    state: 'directory'
    mode: '0700'

- name: 'starship.toml symlink'
  file: 
    src: '{{ playbook_dir }}/../config/starship.toml'
    dest: '~/.config/starship.toml'
    state: 'link'

#
# My vim config.
#

- name: 'install vim config'
  git: 	
    repo: 'git@github.com:ljohnston/vim.git' 
    dest: '~/.vim'

- name: 'configure vim'
  command: '~/.vim/bin/setup install'
  args:
    creates: '~/.vim/plugged'

- name: 'vimwiki symlink'
  file: 
    src: '~/Google Drive/vimwiki'
    dest: '~/vimwiki'
    state: 'link'
